%%
%% Listings and Listing Styles.
%%
%
\RequirePackage{listings}%
%
\def\@lstbasicstyle{\small\color{listing-text-color}\linespread{1.0}\lst@ifdisplaystyle\small\fi\ttfamily{}}%
%
\lstdefinestyle{basic_style}{%
backgroundcolor=\color{listing-background},%
numbers=left,%
frame=single,%
rulecolor=\color{listing-rule},%
frameround=ffff,%
breaklines=true,%
tabsize=4,%
sensitive=true,%
basicstyle=\@lstbasicstyle,%
identifierstyle=\color{listing-identifier},%
numberstyle=\color{listing-line-numbers},%
keywordstyle=\color{listing-keyword-1}\bfseries,%
emphstyle=\color{listing-emph-1}\bfseries,%
emphstyle=[2]\color{listing-emph-2},%
emphstyle=[3]\color{listing-emph-3},%
emphstyle=[4]\color{listing-emph-4}\bfseries,%
emphstyle=[5]\color{listing-emph-5},%
emphstyle=[6]\color{listing-emph-6},%
emphstyle=[7]\color{listing-emph-7}\bfseries,%
emphstyle={[8]\color{listing-emph-8}\bfseries},%
keywordstyle={[2]\color{listing-keyword-2}\bfseries},%
keywordstyle={[3]\color{listing-keyword-3}\bfseries\itshape},%
commentstyle=\itshape\color{listing-comment},%
stringstyle=\color{listing-string},%
showspaces=false,%
showtabs=false,%
showstringspaces=false,%
postbreak=\mbox{\textcolor{red}{$\hookrightarrow$}\space},%
%
literate=%
{á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1%
{Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1%
{à}{{\`a}}1 {è}{{\'e}}1 {ì}{{\`i}}1 {ò}{{\`o}}1 {ù}{{\`u}}1%
{À}{{\`A}}1 {È}{{\'E}}1 {Ì}{{\`I}}1 {Ò}{{\`O}}1 {Ù}{{\`U}}1%
{ä}{{\"a}}1 {ë}{{\"e}}1 {ï}{{\"i}}1 {ö}{{\"o}}1 {ü}{{\"u}}1%
{Ä}{{\"A}}1 {Ë}{{\"E}}1 {Ï}{{\"I}}1 {Ö}{{\"O}}1 {Ü}{{\"U}}1%
{â}{{\^a}}1 {ê}{{\^e}}1 {î}{{\^i}}1 {ô}{{\^o}}1 {û}{{\^u}}1%
{Â}{{\^A}}1 {Ê}{{\^E}}1 {Î}{{\^I}}1 {Ô}{{\^O}}1 {Û}{{\^U}}1%
{œ}{{\oe}}1 {Œ}{{\OE}}1 {æ}{{\ae}}1 {Æ}{{\AE}}1 {ß}{{\ss}}1%
{ç}{{\c c}}1 {Ç}{{\c C}}1 {ø}{{\o}}1 {å}{{\r a}}1 {Å}{{\r A}}1%
{€}{{\EUR}}1 {£}{{\pounds}}1 {«}{{\guillemotleft}}1%
{»}{{\guillemotright}}1 {ñ}{{\~n}}1 {Ñ}{{\~N}}1 {¿}{{?`}}1%
{…}{{\ldots}}1 {≥}{{>=}}1 {≤}{{<=}}1 {„}{{\glqq}}1 {“}{{\grqq}}1%
{”}{{''}}1%
{α}{{$\alpha$}}1 {β}{{$\beta$}}1 {γ}{{$\gamma$}}1 {δ}{{$\delta$}}1%
{ε}{{$\epsilon$}}1 {ζ}{{$\zeta$}}1 {η}{{$\eta$}}1 {θ}{{$\theta$}}1%
{ι}{{$\iota$}}1 {κ}{{$\kappa$}}1 {λ}{{$\lambda$}}1 {μ}{{$\mu$}}1%
{ν}{{$\nu$}}1 {ξ}{{$\xi$}}1 {ο}{{o}}1 {π}{{$\pi$}}1 {ρ}{{$\rho$}}1%
{σ}{{$\sigma$}}1 {τ}{{$\tau$}}1 {υ}{{$\upsilon$}}1 {φ}{{$\phi$}}1%
{χ}{{$\chi$}}1 {ψ}{{$\psi$}}1 {ω}{{$\omega$}}1 {Α}{{A}}1 {Β}{{B}}1%
{Γ}{{$\Gamma$}}1 {Δ}{{$\Delta$}}1 {Ε}{{E}}1 {Ζ}{{Z}}1 {Η}{{H}}1%
{Θ}{{$\Theta$}}1 {Ι}{{I}}1 {Κ}{{K}}1 {Λ}{{$\Lambda$}}1 {Μ}{{M}}1%
{Ν}{{N}}1 {Ξ}{{$\Xi$}}1 {Ο}{{O}}1 {Π}{{$\Pi$}}1 {Ρ}{{P}}1%
{Σ}{{$\Sigma$}}1 {Τ}{{T}}1 {Υ}{{Y}}1 {Φ}{{$\Phi$}}1 {Χ}{{X}}1%
{Ψ}{{$\Psi$}}1 {Ω}{{$\Omega$}}1%
{∖}{{$\setminus$}}1 {∪}{{$\cup$}}1 {∩}{{$\cap$}}1%
{≈}{{$\approx$}}1 {∈}{{$\in$}}1 {∉}{{$\notin$}}1%
}%
%
\lstdefinestyle{python_style}{%
style=basic_style,%
language=Python,%
otherkeywords={\%,\},\{,\&,\|},%
emph={and,break,class,continue,def,yield,del,elif,else,except,exec,finally,for,from,global,if,import,in,lambda,not,or,pass,print,raise,return,try,while,assert,with},%
emph={[2]True,False,None},%
emph={[3]object,type,isinstance,deepcopy,zip,enumerate,reversed,list,set,len,dict,tuple,xrange,append,execfile,real,imag,reduce,str,repr},%
emph={[4]Exception,NameError,IndexError,SyntaxError,TypeError,ValueError,OverflowError,ZeroDivisionError},%
emph={[5]ode,fsolve,sqrt,exp,sin,cos,arctan,arctan2,arccos,pi,array,norm,dot,arange,isscalar,max,sum,flatten,shape,reshape,find,any,all,abs,plot,linspace,legend,quad,polyval,polyfit,hstack,concatenate,vstack,column_stack,empty,zeros,ones,rand,vander,grid,pcolor,eig,eigs,eigvals,svd,qr,tan,det,logspace,roll,min,mean,cumsum,cumprod,diff,vectorize,lstsq,cla,eye,xlabel,ylabel,squeeze},%
emph={[6]__init__,__add__,__mul__,__div__,__sub__,__call__,__getitem__,__setitem__,__eq__,__ne__,__new__,__nonzero__,__rmul__,__radd__,__repr__,__str__,__get__,__truediv__,__pow__,__name__,__future__,__all__},%
emph={[7]assert,yield},%
emph={[8]range},%
morestring=[s]{"""}{"""},%
}%
\lstset{style=python_style}%
%
%
\lstdefinestyle{text_style}{%
style=basic_style,%
language={},%
basicstyle=\@lstbasicstyle,%
identifierstyle=\@lstbasicstyle,%
keywords={},%
otherkeywords={},%
keywordstyle=\@lstbasicstyle,%
emphstyle=\@lstbasicstyle,%
commentstyle=\@lstbasicstyle,%
stringstyle=\@lstbasicstyle,%
keywordstyle={[2]\@lstbasicstyle},%
keywordstyle={[3]\@lstbasicstyle},%
keywordstyle={[4]\@lstbasicstyle},%
keywordstyle={[5]\@lstbasicstyle},%
keywordstyle={[6]\@lstbasicstyle},%
keywordstyle={[7]\@lstbasicstyle},%
emph={[2]},%
emphstyle={[2]\@lstbasicstyle},%
emph={[3]},%
emphstyle={[3]\@lstbasicstyle},%
emph={[4]},%
emphstyle={[4]\@lstbasicstyle},%
emph={[5]},%
emphstyle={[5]\@lstbasicstyle},%
emph={[6]},%
emphstyle={[6]\@lstbasicstyle},%
emph={[7]},%
emphstyle={[7]\@lstbasicstyle},%
emph={[8]},%
emphstyle={[8]\@lstbasicstyle},%
breaklines=true%
}%
%
%
\lstdefinestyle{bash_style}{%
style=basic_style,%
language=bash,%
}%
%
%
%% the box around the inline listings
\protected\gdef\inlinelistingbox#1{\bgroup%
\fboxsep=0.5pt%
\fboxrule=0.5pt%
\mbox{\fcolorbox{listing-rule}{listing-background}{\mbox{#1}}}%
\egroup}%
%
%% print some text inline
%% #1 the optional args
%% #2 the code to be printed inline
\gdef\textil#1{%
\inlinelistingbox{\lstinline[style=text_style]$#1$}}%
%
%% print some Python code inline
%% #1 the optional args
%% #2 the code to be printed inline
\gdef\pythonil#1{%
\inlinelistingbox{\lstinline[style=python_style]$#1$}}%
%
%% print some Bash code inline
%% #1 the optional args
%% #2 the code to be printed inline
\gdef\bashil#1{%
\inlinelistingbox{\lstinline[style=bash_style]$#1$}}%
%
\newlength\@lstbasicstylesheight%
\settoheight{\@lstbasicstylesheight}{\mbox{\bgroup\@lstbasicstyle{s}\egroup}}%
%
%% print some Python code inline with an 's' added for plural
%% #1 the optional args
%% #2 the code to be printed inline
\gdef\pythonils#1{%
\inlinelistingbox{\lstinline[style=python_style]$#1$\resizebox{!}{\@lstbasicstylesheight}{\color{darkgray}s}}}%
%
%%
%% Use latexgit to place a listing.
%% #1 the git repository
%% #2 the local path
%% #3 the post-processing
%% #4 the label (lst: will be pre-pended)
%% #5 the caption
%% #6 the style to use
\protected\gdef\gitCode#1#2#3#4#5#6{%
\gitLoad{#1}{#2}{#3}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitUrl:lst:#4\endcsname{\gitUrl}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:lst:#4\endcsname{\gitFile}%
\lstinputlisting[float,label={lst:#4}#6,caption={#5~(\href{\csname @pwp@gitUrl:lst:#4\endcsname}{src})}]{\csname @pwp@gitFile:lst:#4\endcsname}%
}%
%
%%
%% Use latexgit to place a Python listing.
%% #1 the git repository
%% #2 the local path
%% #3 the post-processing
%% #4 the label (lst: will be pre-pended)
%% #5 the caption
\protected\gdef\gitPython#1#2#3#4#5{%
\gitCode{#1}{#2}{python3 -m latexgit.formatters.python #3}{#4}{#5}{,style=python_style}%
}%
%
%%
%% Use latexgit to place a Bash listing.
%% #1 the git repository
%% #2 the local path
%% #3 the label (lst: will be pre-pended)
%% #4 the caption
\protected\gdef\gitBash#1#2#3#4{%
\gitCode{#1}{#2}{}{#3}{#4}{,style=bash_style}%
}%
%
%% Use latexgit to place a listing with program output.
%% #1 the git repository
%% #2 the local path
%% #3 the command
%% #4 the label (exec: will be pre-pended)
%% #5 the additional parameters, if any
\protected\gdef\gitOutputRaw#1#2#3#4#5{%
\gitExec{#1}{#2}{#3}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:exec:#4\endcsname{\gitFile}%
\lstinputlisting[style=text_style#5]{\csname @pwp@gitFile:exec:#4\endcsname}%
}%
%
%% Use latexgit to place a listing with program output.
%% #1 the git repository
%% #2 the local path
%% #3 the command
%% #4 the label (exec: will be pre-pended)
%% #5 the caption
\protected\gdef\gitOutput#1#2#3#4#5{%
\gitOutputRaw{#1}{#2}{#3}{#4}{,label={exec:#4},caption={#5},float}%
}%
%
%% Use latexgit to place a listing with code and the program output.
%% #1 the git repository
%% #2 the path to the directory
%% #3 the path to the file inside the directory
%% #4 the post-processing
%% #5 the label (lst: will be prepended to the program, exec: will be
%%    pre-pended to the output)
%% #6 the caption
\protected\gdef\gitPythonAndOutput#1#2#3#4#5#6{%
%
\gitLoad{#1}{#2/#3}{python3 -m latexgit.formatters.python #4}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitUrl:lst:#5\endcsname{\gitUrl}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:lst:#5\endcsname{\gitFile}%
\gitExec{#1}{#2}{python3 #3}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:exec:#5\endcsname{\gitFile}%
%
\begin{figure}[tb]%
\centering%
\lstinputlisting[label={lst:#5},style=python_style,caption={#6~(stored in file~\href{\csname @pwp@gitUrl:lst:#5\endcsname}{\textil{#3}}; output in~\cref{exec:#5})}]{\csname @pwp@gitFile:lst:#5\endcsname}%
%
$\downarrow$~~\expandafter\bashil{python3 #3}~~$\downarrow$%
%
\lstinputlisting[label={exec:#5},style=text_style,caption={The standard output of the program~\href{\csname @pwp@gitUrl:lst:#5\endcsname}{\textil{#3}} given in~\cref{lst:#5}.}]{\csname @pwp@gitFile:exec:#5\endcsname}%
\end{figure}%
}%
%
%
%% Use latexgit to place a listing with code and the program output.
%% Ignore errors.
%% #1 the git repository
%% #2 the path to the directory
%% #3 the path to the file inside the directory
%% #4 the post-processing
%% #5 the label (lst: will be prepended to the program, exec: will be
%%    pre-pended to the output)
%% #6 the caption
\protected\gdef\gitPythonAndErrorOutput#1#2#3#4#5#6{%
%
\gitLoad{#1}{#2/#3}{python3 -m latexgit.formatters.python #4}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitUrl:lst:#5\endcsname{\gitUrl}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:lst:#5\endcsname{\gitFile}%
\gitExec{#1}{.}{./scripts/pythonIgnoreErrors.sh #2 #3}%
\expandafter\expandafter\expandafter\edef\expandafter\csname @pwp@gitFile:exec:#5\endcsname{\gitFile}%
%
\begin{figure}[tb]%
\centering%
\lstinputlisting[label={lst:#5},style=python_style,caption={#6~(stored in file~\href{\csname @pwp@gitUrl:lst:#5\endcsname}{\textil{#3}}; output in~\cref{exec:#5})}]{\csname @pwp@gitFile:lst:#5\endcsname}%
%
$\downarrow$~~\expandafter\bashil{python3 #3}~~$\downarrow$%
%
\lstinputlisting[label={exec:#5},style=text_style,caption={The standard output and error as well as the exit code of the program~\href{\csname @pwp@gitUrl:lst:#5\endcsname}{\textil{#3}} given in~\cref{lst:#5}.}]{\csname @pwp@gitFile:exec:#5\endcsname}%
\end{figure}%
}%
%
%%
%% The python syntax environment.
%% Warning: If we do not use the minipage, this may or may not
%% cause strange errors like:
%% "! Argument of ? has an extra }."
\lstnewenvironment{pythonSyntax}[1][true]{%
\center%
\minipage{\linewidth}%
\let\@old@lst@visiblespace\lst@visiblespace%
\def\lst@visiblespace{{\color{Gray}\@old@lst@visiblespace}}%
\lstset{%
style=python_style,%
showspaces=#1%
}}{%
\let\lst@visiblespace\@old@lst@visiblespace%
\endminipage%
\endcenter%
}%
%
